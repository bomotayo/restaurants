{"version":3,"sources":["components/RestaurantItem.js","apis/openTable.js","actions/index.js","components/RestaurantList.js","components/SearchBar.js","components/App.js","reducers/index.js","reducers/restsReducer.js","reducers/fieldsReducer.js","index.js"],"names":["RestaurantItem","list","className","href","reserve_url","target","class","src","name","address","city","state","postal_code","country","phone","axios","create","baseURL","fetchRests","input","dispatch","getState","a","openTable","get","params","response","type","payload","data","restaurants","fetchFields","fields","connect","refinedList","console","log","map","x","refine","refinedVal","toLowerCase","nrest","filter","restaurant","includes","length","key","id","Math","random","props","useForm","defaultValues","handleSubmit","register","onSubmit","values","ref","required","placeholder","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.e0f5b267.chunk.js","sourcesContent":["import React from 'react';\nimport './RestaurantItem.css';\n\nconst RestaurantItem = ({ list }) => {\n  return(\n     <div className=\"ui cards\">\n        <a className=\"ui raised link card\" href={list.reserve_url} target=\"_blank\">\n            <div className=\"content\">\n               <img class=\"right floated mini ui image\" src=\"https://www.opentable.com/img/restimages/21307.jpg\" />\n               <div className=\"header title\">\n                  {list.name} \n               </div>\n               <div className=\"description\">\n                  {list.address}  <br/> {list.city}, {list.state} {list.postal_code}. {list.country}\n                  <br/>   \n                  <br/>\n                  Tel: <a className=\"phone\" href={`tel:${list.phone}`}>{list.phone}</a>     \n               </div>\n            </div>\n            <div className=\"extra content\">\n               <div className=\"ui two buttons\">\n                  <a className=\"ui button btn\" href={list.reserve_url} target=\"_blank\">More Details</a>\n               </div>\n            </div>            \n        </a>\n     </div>\n  )\n}\n\nexport default RestaurantItem;","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://opentable.herokuapp.com'\n\n});","import openTable from '../apis/openTable';\n\n\n//API request is made here. Action creator has redux thunk\n// dispatch allows us to change the data we get & get state allows us to get data\nexport const fetchRests =  (input) => {\n  return async (dispatch, getState ) => {\n    const response =  await openTable.get('/api/restaurants', {\n      params: {\n        city: input.city\n      }\n    });\n\n    dispatch({\n      type: 'FETCH_RESTS',\n      payload: response.data.restaurants\n    });\n  }\n\n};\n\n//Action creators that take in input values from search bar components\nexport const fetchFields = (fields) => {\n  return  dispatch => {\n\n    dispatch({\n      type: 'FETCH_FIELDS',\n      payload:{\n        fields: fields\n      }\n    })\n  }\n}","import React from 'react';\nimport RestaurantItem from './RestaurantItem';\nimport { connect } from 'react-redux';\nimport { fetchRests, fetchFields } from '../actions';\nimport './RestaurantList.css';\n\n\n\nconst RestaurantList = ({fetchRests, restaurants, fields}) => {\n//destructured props = (props.)fetchRests, (props.)restaurants \n\n    let list = restaurants; \n    let refinedList; \n    let city;\n\n    // console.log(fields)\n    console.log(list)\n\n  const renderList = () => {\n    //somewhat filtering method based on refine values\n    refinedList = list;\n    return fields.map(x => {\n      if(x.fields.refine!==''){\n        let refinedVal = typeof(x.fields.refine) === 'string' ? x.fields.refine.toLowerCase() : x.fields.refine;\n        \n        let nrest = refinedList.filter(restaurant => (restaurant.name.toLowerCase().includes(refinedVal) || restaurant.address.toLowerCase().includes(refinedVal) || restaurant.country.toLowerCase().includes(refinedVal) ||restaurant.postal_code.toLowerCase().includes(refinedVal)));\n\n        if(nrest.length >= 1){\n          return nrest.map(restaurant => {\n            return  <RestaurantItem key={restaurant.id} list={restaurant} city={x.fields.city}/>\n         })   \n        }\n        else{\n          return <h3 className=\"error-message\" key={Math.random()}>No resturants in <span className=\"error-filter-message\">{x.fields.city}</span> city with <span className=\"error-filter-message\">{x.fields.refine}</span> filter. Please try different refined search.</h3>\n        }\n    \n      }\n      //if no refined value is entered. This displays the fetched response on the screen\n\n         return list.map(restaurant => {\n            return(\n              <div className=\"four wide column\">\n                <RestaurantItem key={restaurant.id} list={restaurant} />\n              </div>\n            ) \n       })\n\n    })\n\n  }\n\n    //Displaying City\n    fields.map(x => {\n      city = x.fields.city\n      return city;\n    });\n\n  return(\n    <div className= \"ui container\">\n      {/* <h2>{city} Restaurants</h2>\n        <br/> */}\n        <br/>\n      <div className=\"rest-list\">\n        {renderList()}\n      </div>\n    </div>\n  )\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    restaurants: state.restaurants,\n    fields: state.fields\n  };\n}\n\nexport default connect(mapStateToProps, { fetchRests, fetchFields })(RestaurantList);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchRests, fetchFields  } from '../actions';\nimport { useForm } from \"react-hook-form\";\n\n\nconst SearchBar = (props) => {\n\n  const preloadedValues = {\n    city: \"\",\n    refine: \"\"\n  }\n  const { handleSubmit, register } = useForm({\n    defaultValues: preloadedValues\n  });\n\n  //sends input values to both action creators   \n  const onSubmit = values => {\n    props.fetchFields(values);\n    props.fetchRests(values);\n    // reset(preloadedValues)\n  }\n\n  return (\n    <div className=\"ui container \">\n      <form className=\"ui form\" onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"field\">\n              <div className=\"inline fields form-container\">\n                  <div className=\"field\">\n                    <label>City: </label>\n                    <input \n                      type=\"text\"\n                      name=\"city\"\n                      ref={register({\n                        required: \"Required\",\n                      })}\n                    />\n                  </div>\n                  <div className=\"field\">\n                  <label>Refine Search : </label>\n                    <input \n                      type=\"text\"  \n                      name=\"refine\"\n                      placeholder=\"optional\" \n                      ref={register}                    \n                      />\n                  </div> \n                  <button type=\"submit\" className=\"ui button btn\">Search</button>\n              </div>\n            </div> \n    </form>\n    </div>\n  );\n}\n\n\nexport default connect(null, { fetchFields, fetchRests })(SearchBar);\n\n","import React from 'react';\nimport RestaurantList from './RestaurantList';\nimport SearchBar from './SearchBar';\nimport './App.css';\n\n\nconst App = () => {\n  return(\n    <div className=\"ui container main-container\">\n      <h1 className=\"main-title\">RESTAURANT FINDER</h1>\n      <SearchBar />\n      <RestaurantList />\n    </div>\n  )\n};\n\nexport default App;","import { combineReducers } from 'redux';\nimport restsReducer from './restsReducer';\nimport fieldsReducer from './fieldsReducer';\n\nexport default combineReducers({ \n  restaurants: restsReducer,\n  fields: fieldsReducer\n});","export default (state = [], action) => {\n switch (action.type) {\n   case 'FETCH_RESTS':\n     return action.payload;\n   default:\n    return state;\n }\n};","export default (state = [], action) => {\n  switch(action.type){\n    case 'FETCH_FIELDS': \n      return [action.payload];\n    default: \n      return state;\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.querySelector('#root')\n)"],"sourceRoot":""}